{"version":3,"sources":["../src/scatterplot-ctrl.js"],"names":["MetricsPanelCtrl","_","contextSrv","colors","kbn","scatterPlotOptionsEditor","scatterPlotGroupsEditor","panelDefaults","ScatterPlotCtrl","$scope","$injector","$rootScope","timeSrv","onDataReceived","dataList","data","transformData","render","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","onRender","addGroup","index","groups","length","color","push","name","series","theme","user","lightTheme","defaultsDeep","panel","events","on","scope","elem","attrs","ctrl","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,sB,kBAAAA,gB;;AACFC,O;;AACEC,gB,gBAAAA,U;AAEAC,Y,gBAAAA,M;;AADFC,S;;AASEC,8B,kBAAAA,wB;;AACAC,6B,iBAAAA,uB;;;;;;;;;;;;;;;;;;;;;AAGHC,mB,GAAgB,E;;iCAITC,e;;;AAGX,iCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,OAA3C,EAAoD;AAAA;;AAAA,wIAC5CH,MAD4C,EACpCC,SADoC;;AAAA,gBAoBpDG,cApBoD,GAoBnC,UAACC,QAAD,EAAc;AAC7B,kBAAKA,QAAL,GAAgBA,QAAhB;AACA,kBAAKC,IAAL,GAAY,MAAKC,aAAL,CAAmBF,QAAnB,CAAZ;AACA,kBAAKG,MAAL;AACD,WAxBmD;;AAAA,gBA0BpDC,cA1BoD,GA0BnC,YAAM;AACrB,kBAAKC,YAAL,CAAkB,SAAlB,EAA6Bd,wBAA7B,EAAuD,CAAvD;AACA,kBAAKc,YAAL,CAAkB,QAAlB,EAA4Bb,uBAA5B,EAAqD,CAArD;AACA,kBAAKc,WAAL,GAAmBhB,IAAIiB,cAAJ,EAAnB;AACD,WA9BmD;;AAAA,gBAgCpDC,QAhCoD,GAgCzC,YAAM;AACf,gBAAI,CAAC,MAAKR,QAAV,EAAoB;AAAE;AAAS;AAC/B,kBAAKC,IAAL,GAAY,MAAKC,aAAL,CAAmB,MAAKF,QAAxB,CAAZ;AACD,WAnCmD;;AAAA,gBAwDpDS,QAxDoD,GAwDzC,YAAM;AACf,gBAAMC,QAAQ,MAAKC,MAAL,CAAYC,MAA1B;AACA,gBAAMC,QAAQH,QAAQrB,OAAOuB,MAA7B;AACA,kBAAKD,MAAL,CAAYG,IAAZ,CAAiB;AACfC,gCAAeL,QAAQ,CAAvB,CADe;AAEfG,0BAFe;AAGfG,sBAAQ;AAHO,aAAjB;AAKD,WAhEmD;;AAGlD,gBAAKhB,QAAL,GAAgB,IAAhB;AACA,gBAAKC,IAAL,GAAY,EAAZ;AACA,gBAAKH,OAAL,GAAeA,OAAf;AACA,gBAAKmB,KAAL,GAAa7B,WAAW8B,IAAX,CAAgBC,UAAhB,GAA6B,OAA7B,GAAuC,MAApD;;AAEA,gBAAKR,MAAL,GAAc,EAAd;;AAEAxB,YAAEiC,YAAF,CAAe,MAAKC,KAApB,EAA2B5B,aAA3B;;AAEA,gBAAK6B,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKxB,cAArC;AACA,gBAAKuB,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKxB,cAA1C;AACA,gBAAKuB,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKnB,cAAtC;AACA,gBAAKkB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,MAAKf,QAA9B;;AAEA,gBAAKC,QAAL;AAjBkD;AAkBnD;;;;wCAmBaR,I,EAAM;AAClB;AACA;AACA;AACD;;;+BAEIuB,K,EAAOC,I,EAAMC,K,EAAOC,I,EAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;;QAzDkCzC,gB;;;;AAAxBQ,qB,CACJkC,W,GAAc,a","file":"scatterplot-ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport { contextSrv } from 'app/core/core';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { colors } from 'app/core/core';\r\n\r\n// import createConverter from './data-converter';\r\n// import aggregates, { aggregatesMap } from './aggregates';\r\n// import fragments, { fragmentsMap } from './fragments';\r\n// import { labelFormats } from './xAxisLabelFormats';\r\n// import svgRendering from './svg/rendering';\r\n// import canvasRendering from './canvas/rendering';\r\nimport { scatterPlotOptionsEditor } from './options-editor';\r\nimport { scatterPlotGroupsEditor } from './groups-editor';\r\nimport './css/scatter-plot.css!';\r\n\r\nconst panelDefaults = {\r\n\r\n};\r\n\r\nexport class ScatterPlotCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'module.html';\r\n\r\n  constructor($scope, $injector, $rootScope, timeSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.dataList = null;\r\n    this.data = {};\r\n    this.timeSrv = timeSrv;\r\n    this.theme = contextSrv.user.lightTheme ? 'light' : 'dark';\r\n\r\n    this.groups = [];\r\n\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n    this.events.on('data-received', this.onDataReceived);\r\n    this.events.on('data-snapshot-load', this.onDataReceived);\r\n    this.events.on('init-edit-mode', this.onInitEditMode);\r\n    this.events.on('render', this.onRender);\r\n\r\n    this.addGroup();\r\n  }\r\n\r\n  onDataReceived = (dataList) => {\r\n    this.dataList = dataList;\r\n    this.data = this.transformData(dataList);\r\n    this.render();\r\n  }\r\n\r\n  onInitEditMode = () => {\r\n    this.addEditorTab('Options', scatterPlotOptionsEditor, 2);\r\n    this.addEditorTab('Groups', scatterPlotGroupsEditor, 3);\r\n    this.unitFormats = kbn.getUnitFormats();\r\n  }\r\n\r\n  onRender = () => {\r\n    if (!this.dataList) { return; }\r\n    this.data = this.transformData(this.dataList);\r\n  }\r\n\r\n  transformData(data) {\r\n    // const converter = createConverter(this.panel.aggregate, this.panel.fragment);\r\n    // const { from, to } = this.range || this.timeSrv.timeRange();\r\n    // return converter.convertData(from, to, data);\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    // switch (renderer) {\r\n    //   case CANVAS: {\r\n    //     canvasRendering(scope, elem, attrs, ctrl);\r\n    //     break;\r\n    //   }\r\n    //   case SVG: {\r\n    //     svgRendering(scope, elem, attrs, ctrl);\r\n    //     break;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  addGroup = () => {\r\n    const index = this.groups.length;\r\n    const color = index % colors.length;\r\n    this.groups.push({\r\n      name: `Group ${index + 1}`,\r\n      color,\r\n      series: []\r\n    });\r\n  }\r\n}"]}